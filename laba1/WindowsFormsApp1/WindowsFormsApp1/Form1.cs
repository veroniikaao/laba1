using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace WindowsFormsApp1
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
            comboBox1.Items.Add("comboBox");
            menuStrip1.Items.Add("menu");
            menuStrip1.Items[0].Click += a;
            groupBox1.Click += b;
            listBox1.Items.Add("listBox");
            dataGridView1.Click += c;
            panel1.Click += d;


        }

        private void a(object sender, EventArgs e)
        {
            label2.Text = "Элемент управления MenuStrip - Предоставляет систему меню для формы. \n \n Основные свойства:\n \n 1. Name-имя элемента по которому можно обращаться в коде\n 2. BackColor-цвет фона элемента\n 3. Font-выбор шрифта\n 4. ForeColor-цвет для текста\n 5. Text-текст на элементе\n \n Основные события:\n \n 1. Click-происходит при щелчке элемента управления\n 2. DragDrop-вызывается при завершении операции перетаскивания\n 3. Enter-происходит при входе в элемент управления\n 4. FontChanged-происходит при изменении значения свойства Font\n 5. GiveFeedback-вызывается при выполнении операции перетаскивания\n ";
        }
        private void b(object sender, EventArgs e)
        {
            label2.Text = "Элемент управления GroupBox - Предоставляет возможность идентифицируемой группировки других элементов управления. \n \n Основные свойства: 1) Focused возвращает True, если фокус установлен на данном компоненте.  \n 2) Hint определяет текст подсказки для компонента. \n 3) Свойство Left определяет координату левого края компонента.\n 4) ParentShowHint определяет условие отображения всплывающей подсказки. \n \n 1) \n \n Основные события: 1) OnVScroll наступает при изменении положения ползунка вертикальной полосы прокрутки. \n 2) OnKeyPreview наступает перед каждым событием, связанным с нажатием клавиш.";
        }


        private void button1_Click(object sender, EventArgs e)
        {
            label1.Text = "Элемент управления Button - кнопка, которая служит для выполнения действий. \n \n Основные свойства: \n \n 1) Text - Получает или задает текст.\n 2) TextAlign - Получает или задает выравнивание.\n 3) Image - Возвращает или задаёт изображение.\n 4) Visible - Получает или задает значение, указывающее, отображается ли элемент управления.\n 5) Enabled - Возвращает или задает значение, показывающее, сможет ли элемент управления отвечать на \n действия пользователя.\n 6) Name - Возвращает или задает имя элемента управления.\n \n Основные события: \n \n 1) Click - Происходит при щелчке элемента управления. \n 2) DoubleClick - Происходит при двойном щелчке мышью. \n \n Чтобы получить инструкцию по элементу TextBox напишите в окошке 'Text'";
        }

        private void textBox1_TextChanged(object sender, EventArgs e)
        {
            if (textBox1.Text == "Text")
                label1.Text = "Элемент управления TextBox - Позволяет вводить изменяемый текст из нескольких строк. \n Основные свойства: \n \n  1) MaxLength - Получает или задает максимальное разрешенное число знаков в текстовом окне (по умолчанию 32767 символов). \n 2) Multiline - Определяет поддерживает ли элемент многострочный текст. \n 3) Enabled – Показывает, сможет ли элемент управления отвечать на действия пользователя. \n 4) ReadOnly - Возможность изменения содержимого. \n 5) Rows - Возвращает или задает число строк, отображаемых в многострочном текстовом окне. \n 6) Columns – Ширина отображаемого текстового окна в знаках.\n \n Основные события: \n \n 1) KeyDown - Происходит при нажатии клавиши на клавиатуре. \n 2) KeyPress - Происходит при вжатом положении клавиши на клавиатуре. \n 3) KeyUp - Происходит при отпускании клавиши на клавиатуре.\n 4) TextChanged - Происходит при изменении содержимого текстового окна TextBox. \n \n Чтобы получить инструкцию по элементу MaskedTextBox напишите в следующем окне  ‘masked’.";
        }

       
        private void checkBox1_CheckedChanged(object sender, EventArgs e)
        {
            label1.Text = "Элемент управления CheckBox - Указывает, включено или выключено условие. \n \n Основные свойства: \n \n Чтобы отметить флажок, надо установить у его свойства Checked значение true.\n Свойство CheckState позволяет задать для флажка одно из трех состояний: Checked(отмечен), Indeterminate(флажок не определен - отмечен, но находится в неактивном состоянии) и Unchecked(не отмечен) \n Свойство AutoCheck - если оно имеет значение false, то мы не можем изменять состояние флажка.По умолчанию оно имеет значение true. \n \n Основное событие: \n \n CheckedChanged. – генерируется при изменении состояния флажка.";
 
        }

        private void textBox2_TextChanged(object sender, EventArgs e)
        {
            if (textBox2.Text == "label")
                label2.Text = "Элемент управления Label - Отображает текст, который нельзя изменить. \n \n Основные свойства: \n \n 1) Text - Получает или задает текст. \n 2) TextAlign - Получает или задает выравнивание. \n 3) Image - Возвращает или задаёт изображение \n. 4) Visible - Получает или задает значение, указывающее, отображается ли элемент управления.\n 5) Enabled - Возвращает или задает значение, показывающее, сможет ли элемент управления отвечать на действия пользователя. \n \n Основные события: \n \n 1) Click	- Происходит при щелчке элемента управления.\n 2) DoubleClick -	Происходит при двойном щелчке мышью элемента управления Button.\n \n Далее нажмите на кнопку 'menu', чтобы ознакомиться с этим элементом";
        }

        private void radioButton1_CheckedChanged(object sender, EventArgs e)
        {
            label1.Text = "Элемент управления RadioButton - Представляет набор из двух или более взаимоисключающих вариантов выбора для пользователя.\n \n Основные свойства: \n \n 1) Visible - Получает или задает значение, указывающее, отображается ли элемент управления. \n 2) Enabled - Возвращает или задает значение, показывающее, сможет ли элемент управления отвечать на действия пользователя. \n 3) Name - Возвращает или задает имя элемента управления. \n 4) Checked - Возвращает или задаёт значение, указывающее, находится ли RadioButton во включённом состоянии. \n \n Основное событие: \n 1) CheckedChanged - Возникает при переходе RadioButton во включённое состояние.\n \n Далее в окне щелкните на сегодняшнюю даты и вам покажется информация по элементу 'dateTimePicker'";
        }

        private void maskedTextBox1_TextChanged(object sender, EventArgs e)
        {
            if (maskedTextBox1.Text == "masked")
                label1.Text = "Элемент управления MaskedTextBox - Ограничивает формат вводимых пользователем данных в форме. \n \n Основные свойства: \n \n 1) Text - Получает или задает текст. \n 2) TextAlign - Получает или задает выравнивание. \n 3) Image - Возвращает или задаёт изображение \n. 4) Visible - Получает или задает значение, указывающее, отображается ли элемент управления.\n 5) Enabled - Возвращает или задает значение, показывающее, сможет ли элемент управления отвечать на действия пользователя. \n \n Основные события: \n \n 1) Click	- Происходит при щелчке элемента управления.\n 2) DoubleClick -	Происходит при двойном щелчке мышью элемента управления Button.\n \n Выберите в окне рядом 'comboBox', чтобы получить информацию по этому элементу";
        }

        private void comboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {
            label1.Text = "Элемент управления ComboBox - Отображает данные в раскрывающемся поле со списком. \n \n Основные свойства: 1) Brush - определяет кисть, используемую для заливки области компонента.\n 2) ClientHeight - используется для получения или задания высоты клиентской области компонента. \n 3) ClientWidth - используется для получения или задания ширины клиентской области компонента. \n 4) Color - определяет цвет фона компонента. \n 5) Cursor - определяет вид курсора над компонентом. \n \n Основные события: 1) OnEnter наступает в момент получения фокуса компонентом. \n 2) OnHScroll наступает при изменении положения ползунка горизонтальной полосы прокрутки. \n 3) OnMouseDown наступает, если указатель находится в области компонента и была нажата любая кнопка мыши. \n 4) Событие OnVScroll наступает при изменении положения ползунка вертикальной полосы прокрутки.\n \n Далее поставьте голачку сначала у 'checkBox', затем у 'radioButton', чтобы увидеть инструкции данных элементов  " ;
        }

        private void groupBox1_Click(object sender, EventArgs e)
        {
            label2.Text = "Элемент управления GroupBox - Предоставляет возможность идентифицируемой группировки других элементов управления. \n \n Основные свойства: 1) Focused возвращает True, если фокус установлен на данном компоненте.  \n 2) Hint определяет текст подсказки для компонента. \n 3) Свойство Left определяет координату левого края компонента.\n 4) ParentShowHint определяет условие отображения всплывающей подсказки. \n \n 1) \n \n Основные события: 1) OnVScroll наступает при изменении положения ползунка вертикальной полосы прокрутки. \n 2) OnKeyPreview наступает перед каждым событием, связанным с нажатием клавиш.";
        }

        private void listBox1_Click(object sender, EventArgs e)
        {
            label2.Text = "Элемент управления ListBox - Позволяет пользователю выбрать один или несколько элементов из заранее определенного списка. \n \n Основные свойства: \n \n 1) IntegralHeight определяет, будет ли отображаться элемент списка, если он полностью не помещается в окно компонента, путем подгонки высоты компонента. \n 2)  Items определяет список строк компонента. \n \n Основные собятия: \n \n 1) OnVScroll наступает при изменении положения ползунка вертикальной полосы прокрутки. \n 2) OnMouseLeave наступает в момент выхода курсора мыши за пределы области компонента. \n 3) OnKeyDown наступает, если компонент находится в фокусе и производится нажатие клавиши на клавиатуре. \n 4) OnDragOver для компонента наступает, когда пользователь протаскивает над ним перетаскиваемый объект.\n \n Чтобы увидеть инструкцию по элементу 'pictureBox' нажмите на картинку с котом";
        }

        private void menuStrip1_Click(object sender, ToolStripItemClickedEventArgs e)
        {
            label2.Text = "Элемент управления MenuStrip - Предоставляет систему меню для формы. \n \n Основные свойства:\n \n 1. Name-имя элемента по которому можно обращаться в коде\n 2. BackColor-цвет фона элемента\n 3. Font-выбор шрифта\n 4. ForeColor-цвет для текста\n 5. Text-текст на элементе\n Основные события:\n \n 1. Click-происходит при щелчке элемента управления\n 2. DragDrop-вызывается при завершении операции перетаскивания\n 3. Enter-происходит при входе в элемент управления\n 4. FontChanged-происходит при изменении значения свойства Font\n 5. GiveFeedback-вызывается при выполнении операции перетаскивания \n Чтобы ознакомиться с элементами 'groupBox' и 'listBox' щелкните на эти элементы поочередно"; 
        }

        private void pictureBox1_Click(object sender, EventArgs e)
        {
            label2.Text = "Элемент управления PictureBox - Отображает рисунки в формате точечного рисунка, GIF, JPEG, метафайла или значка. \n \n Image — задает изображение, загружаемое в компонент (в поле этого свойства имеется кнопка с многоточием, с помощью которой открывается диалоговое окно для загрузки \n изображения). \n \n Можно загружать и сохранять изображение также и в режиме исполнения приложения с помощью методов класса PictureBox.\n Load позволяет загружать изображение из файла, путь к которому указан в свойстве ImageLocation. Если в этом свойстве не задавать пути, а указать его в переменной типа String \n (например, String ^ Url), то с помощью метода Load (Url) в форму также можно загрузить изображение. \n \n Нажмите на серое окно рядом с котом, чтобы ознакомиться с элементом 'panel' ";
        }

        private void dateTimePicker1_ValueChanged(object sender, EventArgs e)
        {
            label1.Text = "Элемент управления DateTimePicker - Позволяет пользователю выбрать один элемент из списка дат или времени. \n \n Основные свойства: \n \n 1) Checked определяет признак отметки флага компонента. \n 2) Colors возвращает настройки цветового оформления календаря. \n 3) Data предназначено для хранения любых пользовательских данных. \n 4)  DateMode определяет внешний вид компонента. \n 5) DateFormat определяет формат отображения даты в компоненте. \n \n Основные события: \n \n 1)  OnDropDown наступает непосредственно после развертывания листа календаря. \n 2) OnExit наступает в момент потери фокуса компонентом. \n 3) OnKeyPreview наступает перед каждым событием, связанным с нажатием клавиш. \n \n Теперь щелкните на окно с выбором числа, вам предоставитмя инструкция элемента 'numericUpDown'";
        }

        private void numericUpDown1_Click(object sender, EventArgs e)
        {
            label1.Text = "Элемент управления NumericUpDown - Отображает числовые значения, которые пользователь может просматривать и выбирать. \n \n Основные свойства: \n \n 1) Minimum - Возвращает или задает минимальное допустимое значение для счетчика.\n 2) Maximum - Возвращает или задает максимальное значение для счетчика.\n 3) Increment - Возвращает или задает значение для увеличения или уменьшения счетчика.\n 4) ReadOnly - Возвращает или задает значение, определяющее возможность изменения значений счетчика, путем ввода с клавиатуры\n \n Далее щелкните на окно справа, для вас будет представлена информация элемента 'progressBar'  ";
        }

        private void progressBar1_Click(object sender, EventArgs e)
        {
            label1.Text = "Элемент управления ProgressBar - Графически показывает ход выполнения действия. \n \n Основные свойства: \n \n 1)  Orientation определяет способ размещения индикатора. \n 2) Smooth определяет вид индикатора. \n 3) tepSize определяет величину, на которую будет смещен индикатор при вызове метода Step \n 4)  TabOrder определяет позицию компонента в последовательности табуляции. \n \n Щелкните на окно справа, чтобы увидеть информацию по элементу 'dataGridView'";
        }

        private void label3_Click(object sender, EventArgs e)
        {
            label3.Text = "Элемент управления TabControl - Отображает несколько вкладок, содержащих рисунки и другие элементы управления.\n \n Основные свойства: \n \n 1) Buttons содержит объект с массивами кнопок каждой стороны элемента управления. \n 2) EnableDelete определяет, доступно ли удаление вкладок. \n 3) EnableEdit определяет возможность редактирования заголовков вкладок. \n 4) MenuAddItems определяет меню добавления вкладок. \n 5) SelectedIndex устанавливает индекс выбранной вкладки. \n \n Основные события: \n \n 1) AddingItemFromMenu наступает при добавлении вкладки из меню добавления вкладки. \n 2)  AddMenuShowing наступает во время вызова меню добавления вкладки. \n 3)  AfterAddItem наступает после добавления в компонент новой вкладки. \n 4) ItemMoved наступает после перемещения вкладки. \n 5) TabMenuShowing наступает во время вызова меню у вкладки.";
        }

        private void c(object sender, EventArgs e)
        {
            label1.Text = "Элемент управления DataGridView - Предоставляет гибкую, расширяемую систему для отображения и редактирования табличных данных. \n \n Основные свойства: /n /n 1) Columns - Коллекция столбцов. Может быть создана вручную, при помощи специального окна свойств или создаваться программно. Каждая колонка может быть: текстовым полем, выпадающим списком, CheckBox-ом, кнопкой, картинкой или ссылкой.\n 2) ReadOnly - Возвращает или задает значение, определяющее возможность изменения содержимого.\n 3) ScrollBars - Получает или задает тип полос прокрутки, отображающихся в элементе управления DataGridView.\n 4) ColumnHeadersVisible - Возвращает или задает значение, указывающее, отображается ли строка заголовка столбца.\n 5) RowHeadersVisible - Возвращает или задает значение, указывающее, отображается ли столбец, содержащий заголовки строк. \n \n Основные события: \n \n 1) Click - Происходит при щелчке элемента управления.\n 2) CellEndEdit - Возникает после завершения редактирования ячейки. \n \n Далее перейдите во вкладку 'Элементы 2', чтобы ознакомиться с другими элементами";
        }

        private void d(object sender, EventArgs e)
        {
            label2.Text = "Элемент управления панели - Предоставляет возможность идентифицируемой группировки других элементов управления, а также прокрутку.\n \n Основные события: \n \n 1) HelpRequested - возникает, когда пользователю требуется информация по компоненту \n 2) Layout - возникает, когда компоненты, расположенные на панели, меняют свои места; \n 3) PreviewKeyDown - возникает, когда нажимается клавиша на клавиатуре, но перед событием KeyDown. \n \n Основные свойства: \n \n 1)  AutoScroll - обеспечивает введение автоматического скроллинга по вертикали и по горизонтали в момент, когда очередной компонент, помещаемый на панель, становится видимым не полностью \n 2) AutoScrollMargin - определяет отступы от сторон панели при скроллинге \n 3) AutoScrollMinSize - определяет минимальный размер полос прокрутки, создаваемых для скроллинга. \n \n Перейдите в новую вкладку 'Элементы 3 ', чтобы ознакомиться с оставшимися элементами";
        }

        private void button2_Click(object sender, EventArgs e)
        {
            Form2 newForm = new Form2 { }  ;
            newForm.Show();
        }
    }
}
